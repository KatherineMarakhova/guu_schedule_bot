from openpyxl import load_workbook
from pathlib import Path


class Direct:
    course = ''
    path = ''
    wb = ''
    sheet = ''
    list_insts = []         # —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤
    inst = ''               # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç
    list_edup = []
    edup = ''
    list_napr = []
    napr = ''
    list_groups = []
    group = ''
    msg_count = 0   # —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    check_msg = ''  # —Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–Ω—è–º

    def set_course(self, course):
        self.course = course
        self.path = self.get_file_path(course)

    def set_inst(self, inst):
        self.inst = inst
        self.sheet = self.wb[inst]

    def set_napr(self, napr):
        self.napr = napr

    def set_edup(self, edup):
        self.edup = edup

    def set_group(self, group):
        self.group = group

    def get_list_inst(self):
        full_inst_list = self.wb.sheetnames
        # –ò–Ω–æ–≥–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã —Å –ª–∏—à–Ω–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏, —Ç—É—Ç –∏—Ö —É–¥–∞–ª—è–µ–º
        for s in full_inst_list:
            if s.startswith('3') or s == 'None': # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "3". –≤ —Ñ–∞–π–ª–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º 3 –∫—É—Ä—Å–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 3
                full_inst_list.remove(s)
        self.list_insts = full_inst_list


    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è {'–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç/–Ω–∞–ø—Ä': –µ–≥–æ –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–ª–∏—Ü—ã(—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü)}
    def get_list_napr(self):
        # 1. –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        # 2. –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        curr = (self.next_idx_cat(self.sheet, '–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï', '–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï'))      # —Å—Ç—Ä–æ–∫–∞ –∏ —Å—Ç–æ–ª–±–µ—Ü

        temp = ''
        list_napr = []

        for j in range(curr[1], self.sheet.max_column+1):                           # —Å–¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ –Ω–∞ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞(–≠–¢–û –ù–ê–î–û –ò–°–ü–†–ê–í–ò–¢–¨)
              name = str(self.sheet.cell(curr[0],j).value).strip()
              if (name != '' and name != temp and name!='None'):
                   list_napr.append(name)
              else:
                   continue
              temp = name
        self.list_napr = list_napr

    # –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def get_list_edup(self):
        row = self.get_indexes(self.sheet, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')[0]            # —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞
        coll = self.get_indexes_cat(self.sheet, self.napr, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')[1]            # —Å—Ç–æ–ª–±–µ—Ü –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        next = self.next_idx_cat(self.sheet, self.napr, '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')[1]             # —Å—Ç–æ–ª–±–µ—Ü –≥–¥–µ –æ–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
        list_edup = []
        temp = ''
        for j in range(coll, next):  # –∏–¥–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            name = str(self.sheet.cell(row, j).value).strip()
            if (name != '' and name != temp and name != 'None'):
                list_edup.append(name)
            else:
                continue
            temp = name  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é —è—á–µ–π–∫—É

        self.list_edup = list_edup

    def get_list_group(self):
        row = (self.get_indexes(self.sheet, '‚Ññ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã'))[0]                           # —Ä–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞
        coll = (self.get_indexes_cat(self.sheet, self.edup, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))[1]  # —Å—Ç–æ–ª–±–µ—Ü –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä –ø—Ä–æ–≥
        next = (self.next_idx_cat(self.sheet, self.edup, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'))[1]     # —Å—Ç–æ–ª–±–µ—Ü –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –æ–±—Ä –ø—Ä–æ–≥

        groups = []
        for j in range(coll, next):
            group = self.sheet.cell(row, j).value
            if group == "None": continue
            groups.append(group)
        self.list_groups = groups

    def check_name_in_list(self, name, somelist):
        for i in somelist:
            if i.find(name) != -1:
                return True
        return False

    # –ë–õ–û–ö –ü–û–õ–£–ß–ï–ù–ò–Ø –ò –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–ê ==========================================================
    def first_start(self):                  # –≤—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Ö —á–∏—Ç–∞—Ç—å –∏ –≤—Å–µ
        self.wb = load_workbook(str(self.path))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –Ω–∞—Å —Ñ–∞–π–ª–∞
    def get_file_path(self, course):
        with Path(r"../files") as direction:
            for f in direction.glob(str(course) + "-–∫—É—Ä—Å-–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç*.xlsx"):
                if f: return f


    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞(—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ò–Ω—Å—Ç–∏—Ç—É—Ç, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ —Ç–¥.(–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    def get_indexes(self, sheet, category):
        category = (category.strip()).lower()
        for i in range(1, sheet.max_row):
            for j in range(1, sheet.max_column+1):
                val = (str(sheet.cell(i, j).value).strip()).lower()
                if (val == category):
                    return (i, j)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏(–∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–¥.)
    def get_indexes_cat(self, sheet, name, category):
        name = (name.strip()).lower()
        y, x = self.get_indexes(self.sheet, category)    # –Ω–∞–º –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞! —Ç–µ —É
        for i in range(y, sheet.max_row):
            for j in range(1, sheet.max_column+1):
                val = str(sheet.cell(i, j).value).strip().lower()

                if (val == name):
                    return (i, j)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥—Ä—É–≥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ(–Ω–µ —Ä–∞–≤–Ω–æ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
    def next_idx_cat(self, sheet, name, category):
        row = self.get_indexes(self.sheet, category)[0]      #—Å—Ç—Ä–æ–∫–∞
        name = name.strip().lower()
        coll = self.get_indexes(sheet, name)[1]              #—Å—Ç–æ–ª–±–µ—Ü

        if coll == sheet.max_column: return (row, coll+1)

        for c in range(coll, sheet.max_column+1):  # —Å—Ç—Ä–æ–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            val = str(sheet.cell(row, c).value).strip().lower()
            if val == name:
                if c == sheet.max_column:
                    return (row, sheet.max_column + 1)            #–µ—Å–ª–∏ —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–æ –≤–æ–∑—Ä–∞—â–µ–º –µ–≥–æ + 1
                continue
            elif val != name: return (row, c)
        return

    # –ë–õ–û–ö –í–´–í–û–î–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø ======================================================================
    def get_scd_full(self):
        answer = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {self.edup.capitalize()} {self.course}-{self.group}\n'
        # –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        day = self.get_indexes(self.sheet, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        d_idx = int(day[1])
        row = day[0]                                                                        # —Å—Ç—Ä–æ–∫–∞
        coll = self.get_indexes_cat(self.sheet, self.edup, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')[1]  # —Å—Ç–æ–ª–±–µ—Ü
        coll = coll + int(self.group) - 1                                                   # —Å—Ç–æ–ª–±–µ—Ü –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø—ã

        temp = ''
        lesson = ''
        for i in range(row, self.sheet.max_row):

            day = str(self.sheet.cell(i, d_idx).value)
            time = str(self.sheet.cell(i, d_idx+1).value)
            even = str(self.sheet.cell(i, d_idx+2).value)
            sbj = str(self.sheet.cell(i, coll).value)

            if (day.lower() == 'none'): break

            if sbj == 'None': sbj = '–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç'

            dash = '--------------------------------------Ô∏è'

            if temp != day:
                spaces = ''
                n = len(dash) - len('‚ùóÔ∏è' + day + '‚ùóÔ∏è') - 1
                for i in range(n):
                    spaces += ' '
                answer += f'{dash}\n‚ùóÔ∏è{day}‚ùó{spaces}|Ô∏è\n{dash}\n'
                lesson = 1
                answer += (f'{lesson}üìç{time}\n')
                temp = day
                lesson += 1

            if i % 2 != 0:
                answer += (f'{lesson}üìç{time}\n- {even.capitalize()}\n {sbj}\n\n')
                lesson += 1
            else:
                answer += (f'- {even.capitalize()}\n {sbj}\n\n')

        return answer

    def get_scd_even(self, eveness = "–ß–Å–¢."):

        answer = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {self.edup} {self.course}-{self.group}\n'
        answer += f'{eveness.capitalize()} –Ω–µ–¥–µ–ª—è\n'

        # –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        day = self.get_indexes(self.sheet, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        d_idx = int(day[1])
        row = day[0]  # —Å—Ç—Ä–æ–∫–∞
        coll = self.get_indexes_cat(self.sheet, self.edup, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')[1]  # —Å—Ç–æ–ª–±–µ—Ü
        coll = coll + int(self.group) - 1  # —Å—Ç–æ–ª–±–µ—Ü –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø—ã


        temp = ''
        lesson = ''
        for i in range(row, self.sheet.max_row):

            day = str(self.sheet.cell(i, d_idx).value)
            if (day.lower() == 'none'): break

            time = str(self.sheet.cell(i, d_idx+1).value)
            even = str(self.sheet.cell(i, d_idx+2).value)
            sbj = str(self.sheet.cell(i, coll).value)

            if sbj == 'None': sbj = '–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç'

            dash = '--------------------------------------Ô∏è'

            if temp != day:
                spaces = ''
                n = len(dash) - len('‚ùóÔ∏è' + day + '‚ùóÔ∏è') - 1
                for i in range(n):
                    spaces += ' '
                answer += f'{dash}\n‚ùóÔ∏è{day}‚ùó{spaces}|Ô∏è\n{dash}\n'
                lesson = 1
                temp = day

            if even.strip().lower() == eveness.strip().lower():
                answer += (f'{lesson}üìç{time}\n{sbj}\n\n')
                lesson += 1
        return answer

    def get_scd_weekday(self, weekday = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'):
        answer = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {self.edup} {self.course}-{self.group}\n'

        spaces = ''
        dash = '--------------------------------------Ô∏è'
        n = len(dash) - len('‚ùóÔ∏è' + weekday.upper() + '‚ùóÔ∏è') - 1
        for i in range(n):
            spaces += ' '
        answer += f'{dash}\n‚ùóÔ∏è{weekday.upper()}‚ùó{spaces}|Ô∏è\n{dash}\n'

        # –ø–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        day = self.get_indexes(self.sheet, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        d_idx = int(day[1])
        row = day[0]  # —Å—Ç—Ä–æ–∫–∞
        coll = self.get_indexes_cat(self.sheet, self.edup, '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')[1]  # —Å—Ç–æ–ª–±–µ—Ü
        coll = coll + int(self.group) - 1  # —Å—Ç–æ–ª–±–µ—Ü –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–ø–ø—ã

        temp = ''
        lesson = 1
        for i in range(row, self.sheet.max_row):

            day = str(self.sheet.cell(i, d_idx).value)
            if (day.lower() == 'none'): break

            time = str(self.sheet.cell(i, d_idx+1).value)
            even = str(self.sheet.cell(i, d_idx+2).value)
            sbj = str(self.sheet.cell(i, coll).value)

            if sbj == 'None': sbj = '–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç'
            if weekday.lower() == day.lower():
                if i % 2 != 0:
                    answer += (f'{lesson}üìç{time}\n- {even.capitalize()}\n {sbj}\n\n')
                    lesson += 1
                else:
                    answer += (f'- {even.capitalize()}\n {sbj}\n\n')
        return answer

    def clear_attributes(self):
        self.course = ''
        self.path = ''
        self.wb = ''
        self.sheet = ''
        self.list_insts = []  # —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤
        self.inst = ''  # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç
        self.list_edup = []
        self.edup = ''
        self.list_napr = []
        self.napr = ''
        self.list_groups = []
        self.group = ''

    def add_token(self, token):
        is_here = False
        with open('tokens.txt') as file:
            for line in file:
                if str(line).find(str(token)) != -1:
                    # print('–Ω–∞—à–µ–ª')
                    is_here = True
                    break
        if not is_here:
            with open('tokens.txt', 'a') as file:
                file.write(f'\n{token}')
